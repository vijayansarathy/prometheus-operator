---
apiVersion: v1
kind: Namespace
metadata:
  name: bosear
  labels:
    monitor: prometheus

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: recommender-app
  namespace: bosear
spec:
  replicas: 3
  selector:
    matchLabels:
      role: web-service
      app: recommender-app
  template:
    metadata:
      labels:
        role: web-service
        app: recommender-app
      annotations:
        prometheus.io/scrape: 'true'
    spec: 
      containers:          
        - name: java  
          image: 937351930975.dkr.ecr.us-east-1.amazonaws.com/k8s-recommender:latest
          imagePullPolicy: Always   
          env:
            - name: POSTGRES_USER
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_USER
            - name: POSTGRES_PASSWORD
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_PASSWORD
            - name: POSTGRES_DATABASE
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_DATABASE               
            - name: POSTGRES_HOST
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_HOST  
            - name: POSTGRES_PORT
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_PORT                        
            - name: POSTGRES_TABLEPREFIX
              valueFrom:
                    secretKeyRef:
                      name: postgres-credentials
                      key: POSTGRES_TABLEPREFIX       
          ports:
            - containerPort: 8080
              name: http 
              protocol: TCP
          resources:
            requests:
              cpu: "100m"
              memory: "256Mi"
            limits:
              cpu: "500m" 
              memory: "1000Mi"
          livenessProbe:
            httpGet: 
              path: /live
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3            
          readinessProbe:
            httpGet: 
              path: /ready
              port: 8080
            initialDelaySeconds: 15
            timeoutSeconds: 1
            periodSeconds: 10
            failureThreshold: 3        
            
---
apiVersion: v1
kind: Service
metadata:
  name: recommender-svc
  namespace: bosear
  #
  # ServiceMonitor uses these labels to discover the Endpoints objects
  # ServiceMonitor in turn configures Prometheus to monitor the Pods pertaining to those Endpoints
  #
  labels:
    svc: recommender-svc
  annotations:
    prometheus.io/scrape: 'true'    
spec:
  sessionAffinity: None
  type: ClusterIP  
  ports:
  - name: web
    protocol: TCP
    port: 80
    targetPort: 8080
  selector:
    role: web-service
    app: recommender-app

